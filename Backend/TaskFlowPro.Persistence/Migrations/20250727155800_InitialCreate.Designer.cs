// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TaskFlowPro.Persistence.Data;

#nullable disable

namespace TaskFlowPro.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250727155800_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TaskFlowPro.Domain.Entities.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RoleId");

                    b.HasIndex("RoleName")
                        .IsUnique()
                        .HasDatabaseName("UK_Roles_RoleName");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            RoleName = "Global Administrator"
                        },
                        new
                        {
                            RoleId = 2,
                            RoleName = "Team Leader"
                        },
                        new
                        {
                            RoleId = 3,
                            RoleName = "Team Member"
                        },
                        new
                        {
                            RoleId = 4,
                            RoleName = "User without Team"
                        });
                });

            modelBuilder.Entity("TaskFlowPro.Domain.Entities.Task", b =>
                {
                    b.Property<int>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TaskId"));

                    b.Property<int>("AssignedToUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("NTEXT");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Pending");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("TaskId");

                    b.HasIndex("CreatedByUserId")
                        .HasDatabaseName("IX_Tasks_Creator");

                    b.HasIndex("DueDate")
                        .HasDatabaseName("IX_Tasks_DueDate");

                    b.HasIndex("Title")
                        .HasDatabaseName("IX_Tasks_Title");

                    b.HasIndex("AssignedToUserId", "Status")
                        .HasDatabaseName("IX_Tasks_Assignee_Status");

                    b.HasIndex("TeamId", "Status")
                        .HasDatabaseName("IX_Tasks_Team_Status");

                    b.HasIndex("TeamId", "AssignedToUserId", "Status")
                        .HasDatabaseName("IX_Tasks_Team_Assignee_Status");

                    b.ToTable("Tasks", t =>
                        {
                            t.HasCheckConstraint("CK_Tasks_Status", "Status IN ('Pending', 'In Progress', 'Completed', 'Overdue', 'Cancelled')");
                        });
                });

            modelBuilder.Entity("TaskFlowPro.Domain.Entities.Team", b =>
                {
                    b.Property<int>("TeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeamId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int?>("LeaderId")
                        .HasColumnType("int");

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("TeamId");

                    b.HasIndex("LeaderId")
                        .HasDatabaseName("IX_Teams_LeaderId");

                    b.HasIndex("TeamName")
                        .IsUnique()
                        .HasDatabaseName("UK_Teams_TeamName");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("TaskFlowPro.Domain.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("LastTokenIssueAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("UK_Users_Email");

                    b.HasIndex("LastTokenIssueAt")
                        .HasDatabaseName("IX_Users_TokenIssue");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("IX_Users_RoleId");

                    b.HasIndex("TeamId")
                        .HasDatabaseName("IX_Users_TeamId");

                    b.HasIndex("TeamId", "RoleId")
                        .HasDatabaseName("IX_Users_Team_Role");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TaskFlowPro.Domain.Entities.Task", b =>
                {
                    b.HasOne("TaskFlowPro.Domain.Entities.User", "AssignedToUser")
                        .WithMany("AssignedTasks")
                        .HasForeignKey("AssignedToUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Tasks_AssignedTo");

                    b.HasOne("TaskFlowPro.Domain.Entities.User", "CreatedByUser")
                        .WithMany("CreatedTasks")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Tasks_CreatedBy");

                    b.HasOne("TaskFlowPro.Domain.Entities.Team", "Team")
                        .WithMany("Tasks")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Tasks_TeamId");

                    b.Navigation("AssignedToUser");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("TaskFlowPro.Domain.Entities.Team", b =>
                {
                    b.HasOne("TaskFlowPro.Domain.Entities.User", "Leader")
                        .WithMany("LeadingTeams")
                        .HasForeignKey("LeaderId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Teams_LeaderId");

                    b.Navigation("Leader");
                });

            modelBuilder.Entity("TaskFlowPro.Domain.Entities.User", b =>
                {
                    b.HasOne("TaskFlowPro.Domain.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Users_RoleId");

                    b.HasOne("TaskFlowPro.Domain.Entities.Team", "Team")
                        .WithMany("Members")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Users_TeamId");

                    b.Navigation("Role");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("TaskFlowPro.Domain.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("TaskFlowPro.Domain.Entities.Team", b =>
                {
                    b.Navigation("Members");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("TaskFlowPro.Domain.Entities.User", b =>
                {
                    b.Navigation("AssignedTasks");

                    b.Navigation("CreatedTasks");

                    b.Navigation("LeadingTeams");
                });
#pragma warning restore 612, 618
        }
    }
}
